####
EPIC
####

.. contents::

TODO


*************************
Installation Instructions
*************************

Install requires a python3 environment. I recommend using anaconda, once
anaconda is installed, I recommend making an environment to use for epic
analysis::

   conda update conda
   conda create --name epic_analysis python=3
   source activate epic_analysis

Once conda is installed, create your local epic library by checking out epic
from Marc's ifshome::

   git clone /ifshome/mharrison/git/Epic_Tools/ my_epic_tools

Make a branch to do your local development. Replace ``my_awesome_branch``
with a meaningful name for your analysis project::

   cd my_epic_tools
   git checkout -b my_awesome_branch_name

Install epic tools dependencies::

   pip install -r requirements.txt

Then, make a script in the scripts folder, you can use one of the existing
ones as a template. If you are using a conda environment, you can't just
include ``#!/usr/bin/env python`` as the first line to run your script.
Instead, run::

   python your_script_name.py

This will make sure to use the local version of python that's located in your
working python environment.

Debugging
=========

If you want to run with a debugger, I recommend using ipython. First, make
sure you have it installed::

   conda update conda
   conda install ipython3

Next, ``cd`` to your scripts directory and open ipython with debugging
enabled. Note that since this program uses python3, we'll make sure that
ipython is also working with python3 by calling ``ipython3``::

   cd my awesome_script_folder
   ipython3 --pdb

This should put you into the ipython command prompt. Note that you can also
toggle pdb on/off by typing ``%pdb`` in this ipython command prompt. Within
the prompt, to run your script, send this command::

   %run my_awesome_script.py

And voila! It should be running! If/when it reaches an uncaught exception it
will jump into debug mode. If/when that happens, here's the basics you need
to know in order to figure out what went wrong.

* You can list out the surrounding lines of code if you type ``l``
* You can travel up the call stack by typing ``u``
* You can travel back down the call stack by typing ``d``
* You can list out values of variables that are located at your current level
  of the call stack by typing the variable name.
* You quit the debugger by typing ``q``

Those are about the only commands that I use. If you want to learn more,
check out the `pdb docs`_.

.. _pdb docs: https://docs.python.org/3.5/library/pdb.html


*********************************************
Saving Your Work and Sharing it with your Lab
*********************************************

Make sure to run::

   git commit -a

Every once in a while in order to version control your work. If you make some
 interesting changes to epic tools and you want to share, push your branch
 back to Marc's repository so she can merge your changes with the master
 branch. To do this, run the following command after running git commit::

   git push origin my_awesome_branch

Happy science-ing!


********
Examples
********

Look in the scripts folder

Starting up an analysis after everything is installed
=====================================================

Run the following::

   source activate py3env
   ipython3 --pdb
   %run /Users/Marc/PycharmProjects/Epic_Tools/scripts/boruta_fs_files.py

If you want to run multiple files you can call them in the terminal after
 opening ipython3 with:
%run Epic_Tools/scripts/freesurfer_analysis2.py /ifs/loni/faculty/thompson/four_d/
   mharrison/ABIDE/MDD_ISBI/MDD_full_notmatched_21.csv


*****************
Papers Using EPIC
*****************

TODO

.. toctree:: Contents

   about_epic
   epic_v2
